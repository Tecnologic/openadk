menu "Crypto kernel modules"
config ADK_KERNEL_CRYPTO
	tristate

config ADK_KERNEL_CRYPTO_HW
	tristate

config ADK_KERNEL_CRYPTO_AES
	boolean

config ADK_KERNEL_CRYPTO_SHA256
	boolean

config ADK_KERNEL_CRYPTO_CBC
	boolean
	
comment "Hardware cryptography"

menu "Hardware crypto devices"

config ADK_KPACKAGE_KMOD_CRYPTO_DEV_GEODE
	prompt "kmod-crypto-dev-geode.................. Support for the Geode LX/GX AES engine"
	tristate
	select ADK_KERNEL_CRYPTO
	select ADK_KERNEL_CRYPTO_HW
	select ADK_KPACKAGE_KMOD_CRYPTO_ECB
	select ADK_KPACKAGE_KMOD_CRYPTO_CBC
	depends on ADK_TARGET_WITH_GEODE_CRYPTO
	default y if ADK_TARGET_WITH_GEODE_CRYPTO
	default n
	help
	  Say 'Y' here to use the AMD Geode LX processor on-board AES
	  engine for the CryptoAPI AES algorithm.

config ADK_KPACKAGE_KMOD_CRYPTO_DEV_HIFN_795X
	prompt "kmod-crypto-dev-hifn-795x.............. Driver for HIFN 795x crypto accelerator chips"
	tristate
	select ADK_KERNEL_CRYPTO
	select ADK_KERNEL_CRYPTO_HW
	#select ADK_KPACKAGE_KMOD_CRYPTO_MANAGER2
	select ADK_KPACKAGE_KMOD_CRYPTO_DES
	depends on ADK_TARGET_WITH_PCI || ADK_TARGET_WITH_MINIPCI
	default n
	help
	  This option allows you to have support for HIFN 795x crypto adapters.

endmenu

comment "Software cryptography"

menu "Crypto core / Block and Hash modes"

config ADK_KERNEL_MOD_CRYPTO_PCOMP
	tristate

config ADK_KPACKAGE_KMOD_CRYPTO_PCOMP2
	tristate
	select ADK_KERNEL_CRYPTO
	select ADK_KERNEL_MOD_CRYPTO_PCOMP
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help

config ADK_KERNEL_MOD_CRYPTO_ALGAPI
	tristate
	
config ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	tristate
	select ADK_KERNEL_CRYPTO
	select ADK_KERNEL_MOD_CRYPTO_ALGAPI
	default n
	help

config ADK_KERNEL_MOD_CRYPTO_AEAD
	tristate

config ADK_KPACKAGE_KMOD_CRYPTO_AEAD2
	tristate
	select ADK_KERNEL_CRYPTO
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	select ADK_KERNEL_MOD_CRYPTO_AEAD
	default n
	help

config ADK_KERNEL_MOD_CRYPTO_HASH
	tristate

config ADK_KPACKAGE_KMOD_CRYPTO_HASH2
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	select ADK_KERNEL_MOD_CRYPTO_HASH
	default n
	help

config ADK_KERNEL_MOD_CRYPTO_BLKCIPHER
	tristate

config ADK_KPACKAGE_KMOD_CRYPTO_BLKCIPHER2
	tristate
	#select ADK_KPACKAGE_KMOD_CRYPTO_RNG2
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	select ADK_KERNEL_MOD_CRYPTO_BLKCIPHER
	default n
	help

config ADK_KERNEL_MOD_CRYPTO_WORKQUEUE
	tristate

config ADK_KERNEL_MOD_CRYPTO_MANAGER
	tristate

#config ADK_KPACKAGE_KMOD_CRYPTO_MANAGER2
#	prompt "kmod-crypto-manager2................. Crypto algorithm manager"
#	tristate
#	select ADK_KPACKAGE_KMOD_CRYPTO_HASH2
#	select ADK_KPACKAGE_KMOD_CRYPTO_BLKCIPHER2
#	select ADK_KPACKAGE_KMOD_CRYPTO_AEAD2
##	select ADK_KPACKAGE_KMOD_CRYPTO_PCOMP2
#	select ADK_KERNEL_MOD_CRYPTO_MANAGER
##	select ADK_KERNEL_MOD_CRYPTO_WORKQUEUE
#	default n
#	help

config ADK_KPACKAGE_KMOD_CRYPTO_AUTHENC
	prompt "kmod-crypto-authenc.................. AuthENC (IPsec)"
	tristate
	#select ADK_KPACKAGE_KMOD_CRYPTO_MANAGER2
	default n
	help

config ADK_KPACKAGE_KMOD_CRYPTO_SEQIV
	prompt "kmod-crypto-seqiv.................... Sequence Number IV Generator"
	tristate
	#select ADK_KPACKAGE_KMOD_CRYPTO_RNG2
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	help
	  This IV generator generates an IV based on a sequence number by
	  xoring it with a salt.  This algorithm is mainly useful for CTR

config ADK_KPACKAGE_KMOD_CRYPTO_CTS
	prompt "kmod-crypto-cts...................... CTS support"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_BLKCIPHER2
#	select ADK_KPACKAGE_KMOD_CRYPTO_MANAGER2
	default n
	help
          CTS: Cipher Text Stealing
          This is the Cipher Text Stealing mode as described by
          Section 8 of rfc2040 and referenced by rfc3962.
          (rfc3962 includes errata information in its Appendix A)
          This mode is required for Kerberos gss mechanism support
          for AES encryption.

config ADK_KPACKAGE_KMOD_CRYPTO_CBC
	prompt "kmod-crypto-cbc...................... CBC support"
	tristate
	depends on !ADK_KERNEL_CRYPTO_CBC
	select ADK_KPACKAGE_KMOD_CRYPTO_BLKCIPHER2
#	select ADK_KPACKAGE_KMOD_CRYPTO_MANAGER2
	default n
	help
	  CBC: Cipher Block Chaining mode
	  This block cipher algorithm is required for IPSec.

config ADK_KPACKAGE_KMOD_CRYPTO_CCM
	prompt "kmod-crypto-ccm...................... CCM support"
	tristate
#	select ADK_KPACKAGE_KMOD_CRYPTO_MANAGER2
	select ADK_KPACKAGE_KMOD_CRYPTO_CTR
	default n
	help
	  Support for Counter with CBC MAC. Required for IPsec.

config ADK_KPACKAGE_KMOD_CRYPTO_GCM
	prompt "kmod-crypto-gcm...................... GCM support"
	tristate
#	select ADK_KPACKAGE_KMOD_CRYPTO_MANAGER2
	select ADK_KPACKAGE_KMOD_CRYPTO_CTR
	default n
	help
	  Support for Galois/Counter Mode (GCM) and Galois Message
          Authentication Code (GMAC). Required for IPSec.

config ADK_KPACKAGE_KMOD_CRYPTO_CTR
	prompt "kmod-crypto-ctr...................... CTR support"
	tristate
#	select ADK_KPACKAGE_KMOD_CRYPTO_MANAGER2
	select ADK_KPACKAGE_KMOD_CRYPTO_SEQIV
	default n
	help
	  CTR: Counter mode
	  This block cipher algorithm is required for IPSec.

config ADK_KPACKAGE_KMOD_CRYPTO_ECB
	prompt "kmod-crypto-ecb...................... ECB support"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_BLKCIPHER2
#	select ADK_KPACKAGE_KMOD_CRYPTO_MANAGER2
	default n
	help
	  ECB: Electronic CodeBook mode
	  This is the simplest block cipher algorithm.  It simply encrypts
	  the input block by block.

config ADK_KPACKAGE_KMOD_CRYPTO_HMAC
	prompt "kmod-crypto-hmac..................... HMAC support"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_HASH2
#	select ADK_KPACKAGE_KMOD_CRYPTO_MANAGER2
	default n
	help
	  HMAC: Keyed-Hashing for Message Authentication (RFC2104).
	  This is required for IPSec.

config ADK_KPACKAGE_KMOD_CRYPTO_XCBC
	prompt "kmod-crypto-xcbc..................... XCBC support"
	tristate
	default n
	select ADK_KPACKAGE_KMOD_CRYPTO_HASH2
#	select ADK_KPACKAGE_KMOD_CRYPTO_MANAGER2
	help
          XCBC: Keyed-Hashing with encryption algorithm

config ADK_KERNEL_MOD_CRYPTO_RNG
	tristate

#config ADK_KPACKAGE_KMOD_CRYPTO_RNG2
#	prompt "kmod-crypto-rng2..................... RNG support"
#	tristate
#	select ADK_KERNEL_MOD_CRYPTO_RNG
#	default n
#	help
#	  Random number generator
endmenu

menu "Digest algorithms"

config ADK_KPACKAGE_KMOD_CRYPTO_MD4
	prompt "kmod-crypto-md4...................... MD4 digest algorithm"
	tristate
	default n
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	select ADK_KPACKAGE_KMOD_CRYPTO_HASH2
	help
	  MD4 message digest algorithm (RFC1320).

config ADK_KPACKAGE_KMOD_CRYPTO_MD5
	prompt "kmod-crypto-md5...................... MD5 digest algorithm"
	tristate
	default n
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	select ADK_KPACKAGE_KMOD_CRYPTO_HASH2
	help
	  MD5 message digest algorithm (RFC1321).

config ADK_KPACKAGE_KMOD_CRYPTO_SHA1
	prompt "kmod-crypto-sha1..................... SHA1 digest algorithm"
	tristate
	default n
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	select ADK_KPACKAGE_KMOD_CRYPTO_HASH2
	help
	  SHA-1 secure hash standard (FIPS 180-1/DFIPS 180-2).

config ADK_KPACKAGE_KMOD_CRYPTO_SHA256
	prompt "kmod-crypto-sha256................... SHA256 digest algorithm"
	tristate
	default n
	depends on !ADK_KERNEL_CRYPTO_SHA256
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	select ADK_KPACKAGE_KMOD_CRYPTO_HASH2
	help
	  SHA256 secure hash standard (DFIPS 180-2).
	  
	  This version of SHA implements a 256 bit hash with 128 bits of
	  security against collision attacks.

config ADK_KPACKAGE_KMOD_CRYPTO_SHA512
	prompt "kmod-crypto-sha512................... SHA512 digest algorithm"
	tristate
	default n
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	select ADK_KPACKAGE_KMOD_CRYPTO_HASH2
	help
	  SHA512 secure hash standard (DFIPS 180-2).
	  
	  This version of SHA implements a 512 bit hash with 256 bits of
	  security against collision attacks.

	  This code also includes SHA-384, a 384 bit hash with 192 bits
	  of security against collision attacks.

config ADK_KPACKAGE_KMOD_CRYPTO_WP512
	prompt "kmod-crypto-whirlpool................ Whirlpool digest algorithms"
	tristate
	default n
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	select ADK_KPACKAGE_KMOD_CRYPTO_HASH2
	help
	  Whirlpool hash algorithm 512, 384 and 256-bit hashes

	  Whirlpool-512 is part of the NESSIE cryptographic primitives.
	  Whirlpool will be part of the ISO/IEC 10118-3:2003(E) standard

	  See also:
	  <http://planeta.terra.com.br/informatica/paulobarreto/WhirlpoolPage.html>

config ADK_KPACKAGE_KMOD_CRYPTO_TGR192
	prompt "kmod-crypto-tiger.................... Tiger digest algorithms"
	tristate
	default n
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	select ADK_KPACKAGE_KMOD_CRYPTO_HASH2
	help
	  Tiger hash algorithm 192, 160 and 128-bit hashes

	  Tiger is a hash function optimized for 64-bit processors while
	  still having decent performance on 32-bit processors.
	  Tiger was developed by Ross Anderson and Eli Biham.

	  See also:
	  <http://www.cs.technion.ac.il/~biham/Reports/Tiger/>.
endmenu

menu "Cipher algoritms"

config ADK_KPACKAGE_KMOD_CRYPTO_AES
	prompt "kmod-crypto-aes...................... AES cipher algorithms"
	tristate
	depends on !ADK_KERNEL_CRYPTO_AES
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  AES cipher algorithms (FIPS-197). AES uses the Rijndael 
	  algorithm.

	  Rijndael appears to be consistently a very good performer in
	  both hardware and software across a wide range of computing 
	  environments regardless of its use in feedback or non-feedback 
	  modes. Its key setup time is excellent, and its key agility is 
	  good. Rijndael's very low memory requirements make it very well 
	  suited for restricted-space environments, in which it also 
	  demonstrates excellent performance. Rijndael's operations are 
	  among the easiest to defend against power and timing attacks.	

	  The AES specifies three key sizes: 128, 192 and 256 bits	  

	  See <http://csrc.nist.gov/CryptoToolkit/aes/> for more information.

config ADK_KPACKAGE_KMOD_CRYPTO_AES_586
	prompt "kmod-crypto-aes-i586................. AES cipher algorithms (i586)"
	tristate
	depends on ADK_x86
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  AES cipher algorithms (FIPS-197). AES uses the Rijndael 
	  algorithm.

	  Rijndael appears to be consistently a very good performer in
	  both hardware and software across a wide range of computing 
	  environments regardless of its use in feedback or non-feedback 
	  modes. Its key setup time is excellent, and its key agility is 
	  good. Rijndael's very low memory requirements make it very well 
	  suited for restricted-space environments, in which it also 
	  demonstrates excellent performance. Rijndael's operations are 
	  among the easiest to defend against power and timing attacks.	

	  The AES specifies three key sizes: 128, 192 and 256 bits	  

	  See <http://csrc.nist.gov/CryptoToolkit/aes/> for more information.

config ADK_KPACKAGE_KMOD_CRYPTO_ANUBIS
	prompt "kmod-crypto-anubis................... Anubis cipher algorithm"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  Anubis cipher algorithm.

	  Anubis is a variable key length cipher which can use keys from 
	  128 bits to 320 bits in length.  It was evaluated as a entrant
	  in the NESSIE competition.
	  
	  See also:
	  <https://www.cosic.esat.kuleuven.ac.be/nessie/reports/>
	  <http://planeta.terra.com.br/informatica/paulobarreto/AnubisPage.html>

config ADK_KPACKAGE_KMOD_CRYPTO_ARC4
	prompt "kmod-crypto-arc4..................... ARC4 cipher algorithm"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  ARC4 cipher algorithm.

	  ARC4 is a stream cipher using keys ranging from 8 bits to 2048
	  bits in length.  This algorithm is required for driver-based 
	  WEP, but it should not be for other purposes because of the
	  weakness of the algorithm.


config ADK_KPACKAGE_KMOD_CRYPTO_BLOWFISH
	prompt "kmod-crypto-blowfish................. Blowfish cipher algorithm"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  Blowfish cipher algorithm, by Bruce Schneier.
	  
	  This is a variable key length cipher which can use keys from 32
	  bits to 448 bits in length.  It's fast, simple and specifically
	  designed for use on "large microprocessors".
	  
	  See also:
	  <http://www.schneier.com/blowfish.html>

config ADK_KPACKAGE_KMOD_CRYPTO_CAMELLIA
	prompt "kmod-crypto-camellia................. Camellia cipher algorithms"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  Camellia cipher algorithms module.

	  Camellia is a symmetric key block cipher developed jointly
	  at NTT and Mitsubishi Electric Corporation.

	  The Camellia specifies three key sizes: 128, 192 and 256 bits.

	  See also:
	  <https://info.isl.ntt.co.jp/crypt/eng/camellia/index_s.html>

config ADK_KPACKAGE_KMOD_CRYPTO_CAST5
	prompt "kmod-crypto-cast5.................... CAST5 (CAST-128) cipher algorithm"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  The CAST5 encryption algorithm (synonymous with CAST-128) is
	  described in RFC2144.

config ADK_KPACKAGE_KMOD_CRYPTO_CAST6
	prompt "kmod-crypto-cast6.................... CAST6 (CATS-256) cipher algorithm"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  The CAST6 encryption algorithm (synonymous with CAST-256) is
	  described in RFC2612.

config ADK_KPACKAGE_KMOD_CRYPTO_DES
	prompt "kmod-crypto-des...................... DES and Triple DES EDE cipher algorithms"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  DES cipher algorithm (FIPS 46-2), and Triple DES EDE (FIPS 46-3).

config ADK_KPACKAGE_KMOD_CRYPTO_FCRYPT
	prompt "kmod-crypto-fcrypt................... FCrypt cipher algorithms"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  FCrypt algorithm used by RxRPC.

config ADK_KPACKAGE_KMOD_CRYPTO_KHAZAD
	prompt "kmod-crypto-khazad................... Khazad cipher algorithm"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  Khazad cipher algorithm.

	  Khazad was a finalist in the initial NESSIE competition.  It is
	  an algorithm optimized for 64-bit processors with good performance
	  on 32-bit processors.  Khazad uses an 128 bit key size.

	  See also:
	  <http://planeta.terra.com.br/informatica/paulobarreto/KhazadPage.html>

config ADK_KPACKAGE_KMOD_CRYPTO_SERPENT
	prompt "kmod-crypto-serpent.................. Serpent cipher algorithm"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  Serpent cipher algorithm, by Anderson, Biham & Knudsen.

	  Keys are allowed to be from 0 to 256 bits in length, in steps
	  of 8 bits.  Also includes the 'Tnepres' algorithm, a reversed
	  variant of Serpent for compatibility with old kerneli code.

	  See also:
	  <http://www.cl.cam.ac.uk/~rja14/serpent.html>

config ADK_KPACKAGE_KMOD_CRYPTO_TEA
	prompt "kmod-crypto-tea...................... TEA, XTEA and XETA cipher algorithms"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  TEA cipher algorithm.

	  Tiny Encryption Algorithm is a simple cipher that uses
	  many rounds for security.  It is very fast and uses
	  little memory.

	  Xtendend Tiny Encryption Algorithm is a modification to
	  the TEA algorithm to address a potential key weakness
	  in the TEA algorithm.

	  Xtendend Encryption Tiny Algorithm is a mis-implementation 
	  of the XTEA algorithm for compatibility purposes.

config ADK_KPACKAGE_KMOD_CRYPTO_TWOFISH
	prompt "kmod-crypto-twofish.................. Twofish cipher algorithm"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  Twofish cipher algorithm.
	  
	  Twofish was submitted as an AES (Advanced Encryption Standard)
	  candidate cipher by researchers at CounterPane Systems.  It is a
	  16 round block cipher supporting key sizes of 128, 192, and 256
	  bits.
	  
	  See also:
	  <http://www.schneier.com/twofish.html>

config ADK_KPACKAGE_KMOD_CRYPTO_TWOFISH_586
	prompt "kmod-crypto-twofish-586.............. Twofish cipher algorithm (i586)"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	depends on ADK_x86
	default n
	help
	  Twofish cipher algorithm.
	  
	  Twofish was submitted as an AES (Advanced Encryption Standard)
	  candidate cipher by researchers at CounterPane Systems.  It is a
	  16 round block cipher supporting key sizes of 128, 192, and 256
	  bits.
	  
	  See also:
	  <http://www.schneier.com/twofish.html>

config ADK_KPACKAGE_KMOD_CRYPTO_NULL
	prompt "kmod-crypto-null..................... Null algorithms"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_BLKCIPHER2
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	default n
	help
	  These are 'Null' algorithms, used by IPsec, which do nothing.

endmenu

menu "Compression"

config ADK_KPACKAGE_KMOD_CRYPTO_DEFLATE
	prompt "kmod-crypto-deflate.................. Deflate compression algorithm"
	tristate
	select ADK_KERNEL_CRYPTO
	default n
	help
	  This is the Deflate algorithm (RFC1951), specified for use in
	  IPSec with the IPCOMP protocol (RFC3173, RFC2394).
	  
	  You will most probably want this if using IPSec.

config ADK_KPACKAGE_KMOD_CRYPTO_LZO
	prompt "kmod-crypto-lzo...................... LZO compression algorithm"
	tristate
	select ADK_KERNEL_CRYPTO
	default n
	help

config ADK_KPACKAGE_KMOD_CRYPTO_MICHAEL_MIC
	prompt "kmod-crypto-michael-mic.............. Michael MIC keyed digest algorithm"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_ALGAPI2
	select ADK_KPACKAGE_KMOD_CRYPTO_HASH2
	default n
	help
	  Michael MIC is used for message integrity protection in TKIP
	  (IEEE 802.11i). This algorithm is required for TKIP, but it
	  should not be used for other purposes because of the weakness
	  of the algorithm.

config ADK_KPACKAGE_KMOD_CRYPTO_CRC32C
	prompt "kmod-crypto-crc32c................... CRC32c CRC algorithm"
	tristate
	select ADK_KPACKAGE_KMOD_CRYPTO_HASH2
	select ADK_KPACKAGE_KMOD_LIBCRC32C
	default n
	help
	  Castagnoli, et al Cyclic Redundancy-Check Algorithm.  Used
	  by iSCSI for header and data digests and by others.
	  See Castagnoli93.  This implementation uses lib/libcrc32c.
          Module will be crc32c.

endmenu
endmenu
