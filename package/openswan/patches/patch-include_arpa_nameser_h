--- openswan-2.6.38.orig/include/arpa/nameser.h	2012-03-23 22:33:43.000000000 +0100
+++ openswan-2.6.38/include/arpa/nameser.h	2014-03-26 19:50:18.000000000 +0100
@@ -55,7 +55,6 @@
 
 #include <sys/param.h>
 #include <sys/types.h>
-#include <sys/cdefs.h>
 
 /*
  * Revision information.  This is the release date in YYYYMMDD format.
@@ -505,62 +504,66 @@ typedef enum __ns_cert_types {
 #define	ns_makecanon		__ns_makecanon
 #define	ns_samename		__ns_samename
 
-__BEGIN_DECLS
-int		ns_msg_getflag __P((ns_msg, int));
-u_int		ns_get16 __P((const u_char *));
-u_long		ns_get32 __P((const u_char *));
-void		ns_put16 __P((u_int, u_char *));
-void		ns_put32 __P((u_long, u_char *));
-int		ns_initparse __P((const u_char *, int, ns_msg *));
-int		ns_skiprr __P((const u_char *, const u_char *, ns_sect, int));
-int		ns_parserr __P((ns_msg *, ns_sect, int, ns_rr *));
-int		ns_sprintrr __P((const ns_msg *, const ns_rr *,
-				 const char *, const char *, char *, size_t));
-int		ns_sprintrrf __P((const u_char *, size_t, const char *,
+#ifdef __cplusplus
+extern "C" {
+#endif
+int		ns_msg_getflag (ns_msg, int);
+u_int		ns_get16 (const u_char *);
+u_long		ns_get32 (const u_char *);
+void		ns_put16 (u_int, u_char *);
+void		ns_put32 (u_long, u_char *);
+int		ns_initparse (const u_char *, int, ns_msg *);
+int		ns_skiprr (const u_char *, const u_char *, ns_sect, int);
+int		ns_parserr (ns_msg *, ns_sect, int, ns_rr *);
+int		ns_sprintrr (const ns_msg *, const ns_rr *,
+				 const char *, const char *, char *, size_t);
+int		ns_sprintrrf (const u_char *, size_t, const char *,
 				  ns_class, ns_type, u_long, const u_char *,
 				  size_t, const char *, const char *,
-				  char *, size_t));
-int		ns_format_ttl __P((u_long, char *, size_t));
-int		ns_parse_ttl __P((const char *, u_long *));
-u_int32_t	ns_datetosecs __P((const char *cp, int *errp));
-int		ns_name_ntol __P((const u_char *, u_char *, size_t));
-int		ns_name_ntop __P((const u_char *, char *, size_t));
-int		ns_name_pton __P((const char *, u_char *, size_t));
-int		ns_name_unpack __P((const u_char *, const u_char *,
-				    const u_char *, u_char *, size_t));
-int		ns_name_pack __P((const u_char *, u_char *, int,
-				  const u_char **, const u_char **));
-int		ns_name_uncompress __P((const u_char *, const u_char *,
-					const u_char *, char *, size_t));
-int		ns_name_compress __P((const char *, u_char *, size_t,
-				      const u_char **, const u_char **));
-int		ns_name_skip __P((const u_char **, const u_char *));
-void		ns_name_rollback __P((const u_char *, const u_char **,
-				      const u_char **));
-int		ns_sign __P((u_char *, int *, int, int, void *,
-			     const u_char *, int, u_char *, int *, time_t));
-int		ns_sign2 __P((u_char *, int *, int, int, void *,
+				  char *, size_t);
+int		ns_format_ttl (u_long, char *, size_t);
+int		ns_parse_ttl (const char *, u_long *);
+u_int32_t	ns_datetosecs (const char *cp, int *errp);
+int		ns_name_ntol (const u_char *, u_char *, size_t);
+int		ns_name_ntop (const u_char *, char *, size_t);
+int		ns_name_pton (const char *, u_char *, size_t);
+int		ns_name_unpack (const u_char *, const u_char *,
+				    const u_char *, u_char *, size_t);
+int		ns_name_pack (const u_char *, u_char *, int,
+				  const u_char **, const u_char **);
+int		ns_name_uncompress (const u_char *, const u_char *,
+					const u_char *, char *, size_t);
+int		ns_name_compress (const char *, u_char *, size_t,
+				      const u_char **, const u_char **);
+int		ns_name_skip (const u_char **, const u_char *);
+void		ns_name_rollback (const u_char *, const u_char **,
+				      const u_char **);
+int		ns_sign (u_char *, int *, int, int, void *,
+			     const u_char *, int, u_char *, int *, time_t);
+int		ns_sign2 (u_char *, int *, int, int, void *,
 			      const u_char *, int, u_char *, int *, time_t,
-			      u_char **, u_char **));
-int		ns_sign_tcp __P((u_char *, int *, int, int,
-				 ns_tcp_tsig_state *, int));
-int		ns_sign_tcp2 __P((u_char *, int *, int, int,
+			      u_char **, u_char **);
+int		ns_sign_tcp (u_char *, int *, int, int,
+				 ns_tcp_tsig_state *, int);
+int		ns_sign_tcp2 (u_char *, int *, int, int,
 				  ns_tcp_tsig_state *, int,
-				  u_char **, u_char **));
-int		ns_sign_tcp_init __P((void *, const u_char *, int,
-					ns_tcp_tsig_state *));
-u_char		*ns_find_tsig __P((u_char *, u_char *));
-int		ns_verify __P((u_char *, int *, void *,
+				  u_char **, u_char **);
+int		ns_sign_tcp_init (void *, const u_char *, int,
+					ns_tcp_tsig_state *);
+u_char		*ns_find_tsig (u_char *, u_char *);
+int		ns_verify (u_char *, int *, void *,
 			       const u_char *, int, u_char *, int *,
-			       time_t *, int));
-int		ns_verify_tcp __P((u_char *, int *, ns_tcp_tsig_state *, int));
-int		ns_verify_tcp_init __P((void *, const u_char *, int,
-					ns_tcp_tsig_state *));
-int		ns_samedomain __P((const char *, const char *));
-int		ns_subdomain __P((const char *, const char *));
-int		ns_makecanon __P((const char *, char *, size_t));
-int		ns_samename __P((const char *, const char *));
-__END_DECLS
+			       time_t *, int);
+int		ns_verify_tcp (u_char *, int *, ns_tcp_tsig_state *, int);
+int		ns_verify_tcp_init (void *, const u_char *, int,
+					ns_tcp_tsig_state *);
+int		ns_samedomain (const char *, const char *);
+int		ns_subdomain (const char *, const char *);
+int		ns_makecanon (const char *, char *, size_t);
+int		ns_samename (const char *, const char *);
+#ifdef __cplusplus
+}
+#endif
 
 #ifdef BIND_4_COMPAT
 #include <arpa/nameser_compat.h>
