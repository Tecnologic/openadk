$Id: update-patches 24 2008-08-31 14:56:13Z wbx $
--- exmap-console-0.4.1.orig/kernel/exmap.c	2006-10-24 20:45:11.000000000 +0200
+++ exmap-console-0.4.1/kernel/exmap.c	2013-10-30 14:01:03.000000000 +0100
@@ -392,7 +392,11 @@ int setup_from_pid(pid_t pid)
 	struct task_struct *tsk;
 	int errcode = -EINVAL;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,26)
+	tsk = find_task_by_vpid(pid);
+#else
 	tsk = find_task_by_pid(pid);
+#endif
 	if (tsk == NULL) {
 		printk (KERN_ALERT
 			"/proc/%s: can't find task for pid %d\n",
@@ -405,6 +409,9 @@ int setup_from_pid(pid_t pid)
 			PROCFS_NAME, pid);
 		goto Exit;
 	}
+	printk (KERN_ALERT
+		"/proc/%s: DEBUG: pid of task is %d\n",
+			PROCFS_NAME, tsk->pid);
 	
 	mm = get_task_mm(tsk);
 	if (mm == NULL) {
@@ -497,40 +504,29 @@ static int procfile_read (char *buffer,
 	return ret;
 }
 
+static const struct file_operations proc_file_fops = {
+ .owner = THIS_MODULE,
+ .write  = procfile_write,
+ .read  = procfile_read,
+};
+
+
 int init_module ()
 {
 	struct proc_dir_entry *exmap_proc_file;
 	printk (KERN_INFO "/proc/%s: insert\n", PROCFS_NAME);
 	
-	exmap_proc_file = create_proc_entry (PROCFS_NAME,
+	exmap_proc_file = proc_create (PROCFS_NAME,
 							0644,
-							NULL);
+							NULL,
+					&proc_file_fops);
 
 	if (exmap_proc_file == NULL) {
-		remove_proc_entry (PROCFS_NAME, &proc_root);
 		printk (KERN_ALERT "/proc/%s: could not initialize\n",
 			PROCFS_NAME);
 		return -ENOMEM;
 	}
 	
-	exmap_proc_file->read_proc = procfile_read;
-	exmap_proc_file->write_proc = procfile_write;
-	exmap_proc_file->owner = THIS_MODULE;
-	
-	/*     exmap_proc_file->mode         = S_IFREG | S_IRUGO; */
-	/* TODO - this is quite probably a security problem */
-	exmap_proc_file->mode = 0666;
-	
-	exmap_proc_file->uid = 0;
-	exmap_proc_file->gid = 0;
-	exmap_proc_file->size = 0;
-
 	init_local_data();
 	return 0;
 }
-
-void cleanup_module ()
-{
-	printk (KERN_INFO "/proc/%s: remove\n", PROCFS_NAME);
-	remove_proc_entry (PROCFS_NAME, &proc_root);
-}
