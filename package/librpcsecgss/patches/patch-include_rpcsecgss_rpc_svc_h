--- librpcsecgss-0.19.orig/include/rpcsecgss/rpc/svc.h	2009-07-29 18:24:50.000000000 +0200
+++ librpcsecgss-0.19/include/rpcsecgss/rpc/svc.h	2014-05-19 15:39:27.314306687 +0200
@@ -40,7 +40,6 @@
 
 #ifndef _RPC_SVC_H
 #define _RPC_SVC_H
-#include <sys/cdefs.h>
 #include <rpc/svc_auth.h>
 
 /*
@@ -79,21 +78,21 @@ typedef struct __rpc_svcxprt {
 	u_short		xp_port;	 /* associated port number */
 	struct xp_ops {
 		/* receive incomming requests */
-		bool_t	(*xp_recv) __P((struct __rpc_svcxprt *,
-			    struct rpc_msg *));
+		bool_t	(*xp_recv) (struct __rpc_svcxprt *,
+			    struct rpc_msg *);
 		/* get transport status */
-		enum xprt_stat (*xp_stat) __P((struct __rpc_svcxprt *));
+		enum xprt_stat (*xp_stat) (struct __rpc_svcxprt *);
 		/* get arguments */
-		bool_t	(*xp_getargs) __P((struct __rpc_svcxprt *, xdrproc_t,
-			    caddr_t));
+		bool_t	(*xp_getargs) (struct __rpc_svcxprt *, xdrproc_t,
+			    caddr_t);
 		/* send reply */
-		bool_t	(*xp_reply) __P((struct __rpc_svcxprt *,
-			    struct rpc_msg *));
+		bool_t	(*xp_reply) (struct __rpc_svcxprt *,
+			    struct rpc_msg *);
 		/* free mem allocated for args */
-		bool_t	(*xp_freeargs) __P((struct __rpc_svcxprt *, xdrproc_t,
-			    caddr_t));
+		bool_t	(*xp_freeargs) (struct __rpc_svcxprt *, xdrproc_t,
+			    caddr_t);
 		/* destroy this struct */
-		void	(*xp_destroy) __P((struct __rpc_svcxprt *));
+		void	(*xp_destroy) (struct __rpc_svcxprt *);
 	} *xp_ops;
 	int		xp_addrlen;	 /* length of remote address */
 	struct sockaddr_in xp_raddr;	 /* remote address */
@@ -179,10 +178,14 @@ struct svc_req {
  *	void (*dispatch)();
  *	int protocol;    like TCP or UDP, zero means do not register
  */
-__BEGIN_DECLS
-extern bool_t	svc_register __P((SVCXPRT *, u_long, u_long,
-		    void (*) __P((struct svc_req *, SVCXPRT *)), int));
-__END_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+extern bool_t	svc_register (SVCXPRT *, u_long, u_long,
+		    void (*) (struct svc_req *, SVCXPRT *), int);
+#ifdef __cplusplus
+}
+#endif
 
 /*
  * Service un-registration
@@ -191,9 +194,13 @@ __END_DECLS
  *	u_long prog;
  *	u_long vers;
  */
-__BEGIN_DECLS
-extern void	svc_unregister __P((u_long, u_long));
-__END_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+extern void	svc_unregister (u_long, u_long);
+#ifdef __cplusplus
+}
+#endif
 
 /*
  * Transport registration.
@@ -201,9 +208,13 @@ __END_DECLS
  * xprt_register(xprt)
  *	SVCXPRT *xprt;
  */
-__BEGIN_DECLS
-extern void	xprt_register	__P((SVCXPRT *));
-__END_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+extern void	xprt_register	(SVCXPRT *);
+#ifdef __cplusplus
+}
+#endif
 
 /*
  * Transport un-register
@@ -211,9 +222,13 @@ __END_DECLS
  * xprt_unregister(xprt)
  *	SVCXPRT *xprt;
  */
-__BEGIN_DECLS
-extern void	xprt_unregister	__P((SVCXPRT *));
-__END_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+extern void	xprt_unregister	(SVCXPRT *);
+#ifdef __cplusplus
+}
+#endif
 
 
 
@@ -244,16 +259,20 @@ __END_DECLS
  * deadlock the caller and server processes!
  */
 
-__BEGIN_DECLS
-extern bool_t	svc_sendreply	__P((SVCXPRT *, xdrproc_t, char *));
-extern void	svcerr_decode	__P((SVCXPRT *));
-extern void	svcerr_weakauth	__P((SVCXPRT *));
-extern void	svcerr_noproc	__P((SVCXPRT *));
-extern void	svcerr_progvers	__P((SVCXPRT *, u_long, u_long));
-extern void	svcerr_auth	__P((SVCXPRT *, enum auth_stat));
-extern void	svcerr_noprog	__P((SVCXPRT *));
-extern void	svcerr_systemerr __P((SVCXPRT *));
-__END_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+extern bool_t	svc_sendreply	(SVCXPRT *, xdrproc_t, char *);
+extern void	svcerr_decode	(SVCXPRT *);
+extern void	svcerr_weakauth	(SVCXPRT *);
+extern void	svcerr_noproc	(SVCXPRT *);
+extern void	svcerr_progvers	(SVCXPRT *, u_long, u_long);
+extern void	svcerr_auth	(SVCXPRT *, enum auth_stat);
+extern void	svcerr_noprog	(SVCXPRT *);
+extern void	svcerr_systemerr (SVCXPRT *);
+#ifdef __cplusplus
+}
+#endif
 
 /*
  * Lowest level dispatching -OR- who owns this process anyway.
@@ -278,12 +297,16 @@ extern fd_set svc_fdset;
 extern int svc_fds;
 #endif /* def FD_SETSIZE */
 
-__BEGIN_DECLS
-extern void	svc_getreq	__P((int));
-extern void	svc_getreqset	__P((fd_set *));
-extern void	svc_getreqset2	__P((fd_set *, int));
-extern void	svc_run		__P((void));
-__END_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+extern void	svc_getreq	(int);
+extern void	svc_getreqset	(fd_set *);
+extern void	svc_getreqset2	(fd_set *, int);
+extern void	svc_run		(void);
+#ifdef __cplusplus
+}
+#endif
 
 /*
  * Socket to use on svcxxx_create call to get default socket
@@ -297,32 +320,48 @@ __END_DECLS
 /*
  * Memory based rpc for testing and timing.
  */
-__BEGIN_DECLS
-extern SVCXPRT *svcraw_create __P((void));
-__END_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+extern SVCXPRT *svcraw_create (void);
+#ifdef __cplusplus
+}
+#endif
 
 
 /*
  * Udp based rpc.
  */
-__BEGIN_DECLS
-extern SVCXPRT *svcudp_create __P((int));
-extern SVCXPRT *svcudp_bufcreate __P((int, u_int, u_int));
-__END_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+extern SVCXPRT *svcudp_create (int);
+extern SVCXPRT *svcudp_bufcreate (int, u_int, u_int);
+#ifdef __cplusplus
+}
+#endif
 
 
 /*
  * Tcp based rpc.
  */
-__BEGIN_DECLS
-extern SVCXPRT *svctcp_create __P((int, u_int, u_int));
-__END_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+extern SVCXPRT *svctcp_create (int, u_int, u_int);
+#ifdef __cplusplus
+}
+#endif
 
 /*
  * Fd based rpc.
  */
-__BEGIN_DECLS
-extern SVCXPRT *svcfd_create __P((int, u_int, u_int));
-__END_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+extern SVCXPRT *svcfd_create (int, u_int, u_int);
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* !_RPC_SVC_H */
