--- libqb-0.16.0.orig/docs/man3/qbipcc.h.3	2013-07-25 20:16:18.000000000 +0200
+++ libqb-0.16.0/docs/man3/qbipcc.h.3	2013-09-09 05:26:31.487810365 +0200
@@ -1,4 +1,4 @@
-.TH "qbipcc.h" 3 "Thu Jul 25 2013" "Version 0.16.0" "libqb" \" -*- nroff -*-
+.TH "qbipcc.h" 3 "Mon Sep 9 2013" "Version 0.16.0" "libqb" \" -*- nroff -*-
 .ad l
 .nh
 .SH NAME
@@ -113,11 +113,9 @@ The \fBqb_ipcc_event_recv()\fP function
 .SH "Typedef Documentation"
 .PP 
 .SS "typedef struct qb_ipcc_connection \fBqb_ipcc_connection_t\fP"
-
 .SH "Function Documentation"
 .PP 
-.SS "\fBqb_ipcc_connection_t\fP* qb_ipcc_connect (const char *name, size_tmax_msg_size)"
-
+.SS "\fBqb_ipcc_connection_t\fP* \fBqb_ipcc_connect\fP (const char *name, size_tmax_msg_size)"
 .PP
 Create a connection to an IPC service\&. \fBParameters:\fP
 .RS 4
@@ -133,12 +131,11 @@ NULL (error: see errno) or a connection
 .PP
 \fBNote:\fP
 .RS 4
-It is recommended to do a one time check on the max_msg_size value using qb_ipcc_verify_dgram_max_msg_size \fIBEFORE\fP calling the connect function when IPC_SOCKET is in use\&. Some distributions while allow large message buffers to be set on the socket, but not actually honor them because of kernel state values\&. The qb_ipcc_verify_dgram_max_msg_size function both sets the socket buffer size and verifies it by doing a send/recv\&. 
+It is recommended to do a one time check on the max_msg_size value using qb_ipcc_verify_dgram_max_msg_size _BEFORE_ calling the connect function when IPC_SOCKET is in use\&. Some distributions while allow large message buffers to be set on the socket, but not actually honor them because of kernel state values\&. The qb_ipcc_verify_dgram_max_msg_size function both sets the socket buffer size and verifies it by doing a send/recv\&. 
 .RE
 .PP
 
-.SS "void* qb_ipcc_context_get (\fBqb_ipcc_connection_t\fP *c)"
-
+.SS "void* \fBqb_ipcc_context_get\fP (\fBqb_ipcc_connection_t\fP *c)"
 .PP
 Get the context (set previously) \fBParameters:\fP
 .RS 4
@@ -150,14 +147,13 @@ Get the context (set previously) \fBPara
 the context 
 .RE
 .PP
-\fBSee Also:\fP
+\fBSee also:\fP
 .RS 4
 \fBqb_ipcc_context_set()\fP 
 .RE
 .PP
 
-.SS "void qb_ipcc_context_set (\fBqb_ipcc_connection_t\fP *c, void *context)"
-
+.SS "void \fBqb_ipcc_context_set\fP (\fBqb_ipcc_connection_t\fP *c, void *context)"
 .PP
 Associate a 'user' pointer with this connection\&. \fBParameters:\fP
 .RS 4
@@ -166,14 +162,13 @@ Associate a 'user' pointer with this con
 \fIc\fP connection instance 
 .RE
 .PP
-\fBSee Also:\fP
+\fBSee also:\fP
 .RS 4
 \fBqb_ipcc_context_get()\fP 
 .RE
 .PP
 
-.SS "void qb_ipcc_disconnect (\fBqb_ipcc_connection_t\fP *c)"
-
+.SS "void \fBqb_ipcc_disconnect\fP (\fBqb_ipcc_connection_t\fP *c)"
 .PP
 Disconnect an IPC connection\&. \fBParameters:\fP
 .RS 4
@@ -181,8 +176,7 @@ Disconnect an IPC connection\&. \fBParam
 .RE
 .PP
 
-.SS "ssize_t qb_ipcc_event_recv (\fBqb_ipcc_connection_t\fP *c, void *msg_ptr, size_tmsg_len, int32_tms_timeout)"
-
+.SS "ssize_t \fBqb_ipcc_event_recv\fP (\fBqb_ipcc_connection_t\fP *c, void *msg_ptr, size_tmsg_len, int32_tms_timeout)"
 .PP
 Receive an event\&. \fBParameters:\fP
 .RS 4
@@ -208,8 +202,7 @@ that msg_ptr will include a \fBqb_ipc_re
 .RE
 .PP
 
-.SS "int32_t qb_ipcc_fc_enable_max_set (\fBqb_ipcc_connection_t\fP *c, uint32_tmax)"
-
+.SS "int32_t \fBqb_ipcc_fc_enable_max_set\fP (\fBqb_ipcc_connection_t\fP *c, uint32_tmax)"
 .PP
 Set the maximum allowable flowcontrol value\&. \fBNote:\fP
 .RS 4
@@ -224,8 +217,7 @@ the default is 1
 .RE
 .PP
 
-.SS "int32_t qb_ipcc_fd_get (\fBqb_ipcc_connection_t\fP *c, int32_t *fd)"
-
+.SS "int32_t \fBqb_ipcc_fd_get\fP (\fBqb_ipcc_connection_t\fP *c, int32_t *fd)"
 .PP
 Get the file descriptor to poll\&. \fBParameters:\fP
 .RS 4
@@ -235,8 +227,7 @@ Get the file descriptor to poll\&. \fBPa
 .RE
 .PP
 
-.SS "int32_t qb_ipcc_is_connected (\fBqb_ipcc_connection_t\fP *c)"
-
+.SS "int32_t \fBqb_ipcc_is_connected\fP (\fBqb_ipcc_connection_t\fP *c)"
 .PP
 Is the connection connected? \fBParameters:\fP
 .RS 4
@@ -251,8 +242,7 @@ Is the connection connected? \fBParamete
 .RE
 .PP
 
-.SS "ssize_t qb_ipcc_recv (\fBqb_ipcc_connection_t\fP *c, void *msg_ptr, size_tmsg_len, int32_tms_timeout)"
-
+.SS "ssize_t \fBqb_ipcc_recv\fP (\fBqb_ipcc_connection_t\fP *c, void *msg_ptr, size_tmsg_len, int32_tms_timeout)"
 .PP
 Receive a response\&. \fBParameters:\fP
 .RS 4
@@ -276,8 +266,7 @@ that msg_ptr will include a \fBqb_ipc_re
 .RE
 .PP
 
-.SS "ssize_t qb_ipcc_send (\fBqb_ipcc_connection_t\fP *c, const void *msg_ptr, size_tmsg_len)"
-
+.SS "ssize_t \fBqb_ipcc_send\fP (\fBqb_ipcc_connection_t\fP *c, const void *msg_ptr, size_tmsg_len)"
 .PP
 Send a message\&. \fBParameters:\fP
 .RS 4
@@ -299,8 +288,7 @@ the msg_ptr must include a \fBqb_ipc_req
 .RE
 .PP
 
-.SS "ssize_t qb_ipcc_sendv (\fBqb_ipcc_connection_t\fP *c, const struct iovec *iov, size_tiov_len)"
-
+.SS "ssize_t \fBqb_ipcc_sendv\fP (\fBqb_ipcc_connection_t\fP *c, const struct iovec *iov, size_tiov_len)"
 .PP
 Send a message (iovec)\&. \fBParameters:\fP
 .RS 4
@@ -322,8 +310,7 @@ the iov[0] must be a \fBqb_ipc_request_h
 .RE
 .PP
 
-.SS "ssize_t qb_ipcc_sendv_recv (\fBqb_ipcc_connection_t\fP *c, const struct iovec *iov, uint32_tiov_len, void *msg_ptr, size_tmsg_len, int32_tms_timeout)"
-
+.SS "ssize_t \fBqb_ipcc_sendv_recv\fP (\fBqb_ipcc_connection_t\fP *c, const struct iovec *iov, uint32_tiov_len, void *msg_ptr, size_tmsg_len, int32_tms_timeout)"
 .PP
 This is a convenience function that simply sends and then recvs\&. \fBParameters:\fP
 .RS 4
@@ -347,14 +334,13 @@ the iov[0] must include a \fBqb_ipc_requ
 that msg_ptr will include a \fBqb_ipc_response_header\fP at the top of the message\&.
 .RE
 .PP
-\fBSee Also:\fP
+\fBSee also:\fP
 .RS 4
 \fBqb_ipcc_sendv()\fP \fBqb_ipcc_recv()\fP 
 .RE
 .PP
 
-.SS "int32_t qb_ipcc_verify_dgram_max_msg_size (size_tmax_msg_size)"
-
+.SS "int32_t \fBqb_ipcc_verify_dgram_max_msg_size\fP (size_tmax_msg_size)"
 .PP
 Test kernel dgram socket buffers to verify the largest size up to the max_msg_size value a single msg can be\&. Rounds down to the nearest 1k\&.
 .PP
