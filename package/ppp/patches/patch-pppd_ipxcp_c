--- ppp-2.4.5.orig/pppd/ipxcp.c	2009-11-16 23:26:07.000000000 +0100
+++ ppp-2.4.5/pppd/ipxcp.c	2014-03-17 16:13:13.000000000 +0100
@@ -78,17 +78,17 @@ ipxcp_options ipxcp_hisoptions[NUM_PPP];
 /*
  * Callbacks for fsm code.  (CI = Configuration Information)
  */
-static void ipxcp_resetci __P((fsm *));	/* Reset our CI */
-static int  ipxcp_cilen __P((fsm *));		/* Return length of our CI */
-static void ipxcp_addci __P((fsm *, u_char *, int *)); /* Add our CI */
-static int  ipxcp_ackci __P((fsm *, u_char *, int));	/* Peer ack'd our CI */
-static int  ipxcp_nakci __P((fsm *, u_char *, int, int));/* Peer nak'd our CI */
-static int  ipxcp_rejci __P((fsm *, u_char *, int));	/* Peer rej'd our CI */
-static int  ipxcp_reqci __P((fsm *, u_char *, int *, int)); /* Rcv CI */
-static void ipxcp_up __P((fsm *));		/* We're UP */
-static void ipxcp_down __P((fsm *));		/* We're DOWN */
-static void ipxcp_finished __P((fsm *));	/* Don't need lower layer */
-static void ipxcp_script __P((fsm *, char *)); /* Run an up/down script */
+static void ipxcp_resetci (fsm *);	/* Reset our CI */
+static int  ipxcp_cilen (fsm *);		/* Return length of our CI */
+static void ipxcp_addci (fsm *, u_char *, int *); /* Add our CI */
+static int  ipxcp_ackci (fsm *, u_char *, int);	/* Peer ack'd our CI */
+static int  ipxcp_nakci (fsm *, u_char *, int, int);/* Peer nak'd our CI */
+static int  ipxcp_rejci (fsm *, u_char *, int);	/* Peer rej'd our CI */
+static int  ipxcp_reqci (fsm *, u_char *, int *, int); /* Rcv CI */
+static void ipxcp_up (fsm *);		/* We're UP */
+static void ipxcp_down (fsm *);		/* We're DOWN */
+static void ipxcp_finished (fsm *);	/* Don't need lower layer */
+static void ipxcp_script (fsm *, char *); /* Run an up/down script */
 
 fsm ipxcp_fsm[NUM_PPP];		/* IPXCP fsm structure */
 
@@ -113,10 +113,10 @@ static fsm_callbacks ipxcp_callbacks = {
 /*
  * Command-line options.
  */
-static int setipxnode __P((char **));
-static void printipxnode __P((option_t *,
-			      void (*)(void *, char *, ...), void *));
-static int setipxname __P((char **));
+static int setipxnode (char **);
+static void printipxnode (option_t *,
+			      void (*)(void *, char *, ...), void *);
+static int setipxname (char **);
 
 static option_t ipxcp_option_list[] = {
     { "ipx", o_bool, &ipxcp_protent.enabled_flag,
@@ -170,15 +170,15 @@ static option_t ipxcp_option_list[] = {
  * Protocol entry points.
  */
 
-static void ipxcp_init __P((int));
-static void ipxcp_open __P((int));
-static void ipxcp_close __P((int, char *));
-static void ipxcp_lowerup __P((int));
-static void ipxcp_lowerdown __P((int));
-static void ipxcp_input __P((int, u_char *, int));
-static void ipxcp_protrej __P((int));
-static int  ipxcp_printpkt __P((u_char *, int,
-				void (*) __P((void *, char *, ...)), void *));
+static void ipxcp_init (int);
+static void ipxcp_open (int);
+static void ipxcp_close (int, char *);
+static void ipxcp_lowerup (int);
+static void ipxcp_lowerdown (int);
+static void ipxcp_input (int, u_char *, int);
+static void ipxcp_protrej (int);
+static int  ipxcp_printpkt (u_char *, int,
+				void (*) __P((void *, char *, ...)), void *);
 
 struct protent ipxcp_protent = {
     PPP_IPXCP,
@@ -217,7 +217,7 @@ struct protent ipxcp_protent = {
 
 static int ipxcp_is_up;
 
-static char *ipx_ntoa __P((u_int32_t));
+static char *ipx_ntoa (u_int32_t);
 
 /* Used in printing the node number */
 #define NODE(base) base[0], base[1], base[2], base[3], base[4], base[5]
@@ -323,7 +323,7 @@ setipxnode(argv)
 static void
 printipxnode(opt, printer, arg)
     option_t *opt;
-    void (*printer) __P((void *, char *, ...));
+    void (*printer) (void *, char *, ...);
     void *arg;
 {
 	unsigned char *p;
@@ -1473,7 +1473,7 @@ static int
 ipxcp_printpkt(p, plen, printer, arg)
     u_char *p;
     int plen;
-    void (*printer) __P((void *, char *, ...));
+    void (*printer) (void *, char *, ...);
     void *arg;
 {
     int code, id, len, olen;
