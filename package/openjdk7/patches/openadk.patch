diff -Nur icedtea-2.4.7.orig/Makefile.in icedtea-2.4.7/Makefile.in
--- icedtea-2.4.7.orig/Makefile.in	2014-04-15 23:20:44.689988653 -0500
+++ icedtea-2.4.7/Makefile.in	2015-01-15 20:05:28.339161934 -0600
@@ -712,7 +712,7 @@
 	$(am__append_14) $(am__append_15) $(DISTRIBUTION_PATCHES)
 
 # Bootstrapping patches
-ICEDTEA_BOOT_PATCHES = patches/boot/javafiles.patch \
+ICEDTEA_BOOT_PATCHES = patches/openadk.patch patches/boot/javafiles.patch \
 	patches/boot/ant-javac.patch patches/boot/corba-idlj.patch \
 	patches/boot/corba-no-gen.patch patches/boot/corba-orb.patch \
 	patches/boot/demos.patch patches/boot/fphexconstants.patch \
@@ -2720,7 +2720,7 @@
 stamps/jamvm.stamp: $(OPENJDK_TREE) stamps/rt.stamp
 @BUILD_JAMVM_TRUE@	cd jamvm/jamvm && \
 @BUILD_JAMVM_TRUE@	./autogen.sh --with-java-runtime-library=openjdk7 \
-@BUILD_JAMVM_TRUE@	  --prefix=$(abs_top_builddir)/jamvm/install ; \
+@BUILD_JAMVM_TRUE@	  --prefix=$(abs_top_builddir)/jamvm/install $(CONFIGURE_ARGS); \
 @BUILD_JAMVM_TRUE@	$(MAKE) ; \
 @BUILD_JAMVM_TRUE@	$(MAKE) install
 @BUILD_JAMVM_TRUE@	mkdir -p $(abs_top_builddir)/jamvm/install/hotspot/jre/lib/$(INSTALL_ARCH_DIR)/server
diff -Nur icedtea-2.4.7.orig/patches/openadk.patch icedtea-2.4.7/patches/openadk.patch
--- icedtea-2.4.7.orig/patches/openadk.patch	1969-12-31 18:00:00.000000000 -0600
+++ icedtea-2.4.7/patches/openadk.patch	2015-01-15 20:47:04.615139096 -0600
@@ -0,0 +1,743 @@
+diff -Nur openjdk.orig/hotspot/make/linux/makefiles/zeroshark.make openjdk/hotspot/make/linux/makefiles/zeroshark.make
+--- openjdk.orig/hotspot/make/linux/makefiles/zeroshark.make	2014-02-20 19:51:45.000000000 +0100
++++ openjdk/hotspot/make/linux/makefiles/zeroshark.make	2014-06-17 17:39:28.697018938 +0200
+@@ -39,20 +39,20 @@
+ 
+ offsets_arm.s:	mkoffsets
+ 	@echo Generating assembler offsets
+-	./mkoffsets > $@
++	$(QEMU) ./mkoffsets > $@
+ 
+ bytecodes_arm.s: bytecodes_arm.def mkbc
+ 	@echo Generating ARM assembler bytecode sequences
+-	$(CXX_COMPILE) -E -x c++ - < $< | ./mkbc - $@ $(COMPILE_DONE)
++	$(CXX_COMPILE) -E -x c++ - < $< | $(QEMU) ./mkbc - $@ $(COMPILE_DONE)
+ 
+ mkbc:	$(GAMMADIR)/tools/mkbc.c
+ 	@echo Compiling mkbc tool
+-	$(CC_COMPILE) -o $@ $< $(COMPILE_DONE)
++	$(CC_COMPILE) -static -o $@ $< $(COMPILE_DONE)
+ 
+ mkoffsets:	asm_helper.cpp
+ 	@echo Compiling offset generator
+ 	$(QUIETLY) $(REMOVE_TARGET)
+-	$(CXX_COMPILE) -DSTATIC_OFFSETS -o $@ $< $(COMPILE_DONE)
++	$(CXX_COMPILE) -static -DSTATIC_OFFSETS -o $@ $< $(COMPILE_DONE)
+ 
+ endif
+ endif
+diff -Nur openjdk.orig/hotspot/src/os/linux/vm/os_linux.cpp openjdk/hotspot/src/os/linux/vm/os_linux.cpp
+--- openjdk.orig/hotspot/src/os/linux/vm/os_linux.cpp	2014-02-20 19:51:45.000000000 +0100
++++ openjdk/hotspot/src/os/linux/vm/os_linux.cpp	2014-06-17 17:39:28.701018968 +0200
+@@ -112,7 +112,6 @@
+ # include <string.h>
+ # include <syscall.h>
+ # include <sys/sysinfo.h>
+-# include <gnu/libc-version.h>
+ # include <sys/ipc.h>
+ # include <sys/shm.h>
+ # include <link.h>
+@@ -650,9 +649,7 @@
+      os::Linux::set_glibc_version(str);
+   } else {
+      // _CS_GNU_LIBC_VERSION is not supported, try gnu_get_libc_version()
+-     static char _gnu_libc_version[32];
+-     jio_snprintf(_gnu_libc_version, sizeof(_gnu_libc_version),
+-              "glibc %s %s", gnu_get_libc_version(), gnu_get_libc_release());
++     static char _gnu_libc_version[32] = "2.9";
+      os::Linux::set_glibc_version(_gnu_libc_version);
+   }
+ 
+@@ -2951,10 +2948,7 @@
+ // If we are running with earlier version, which did not have symbol versions,
+ // we should use the base version.
+ void* os::Linux::libnuma_dlsym(void* handle, const char *name) {
+-  void *f = dlvsym(handle, name, "libnuma_1.1");
+-  if (f == NULL) {
+-    f = dlsym(handle, name);
+-  }
++  void *f = dlsym(handle, name);
+   return f;
+ }
+ 
+@@ -5329,7 +5323,21 @@
+ // Linux doesn't yet have a (official) notion of processor sets,
+ // so just return the system wide load average.
+ int os::loadavg(double loadavg[], int nelem) {
+-  return ::getloadavg(loadavg, nelem);
++ FILE *LOADAVG;
++ double avg[3] = { 0.0, 0.0, 0.0 };
++ int i, res = -1;;
++
++ if ((LOADAVG = fopen("/proc/loadavg", "r"))) {
++ fscanf(LOADAVG, "%lf %lf %lf", &avg[0], &avg[1], &avg[2]);
++ res = 0;
++ fclose(LOADAVG);
++ }
++
++ for (i = 0; (i < nelem) && (i < 3); i++) {
++ loadavg[i] = avg[i];
++ }
++
++ return res;
+ }
+ 
+ void os::pause() {
+diff -Nur openjdk.orig/hotspot/src/share/vm/utilities/globalDefinitions_gcc.hpp openjdk/hotspot/src/share/vm/utilities/globalDefinitions_gcc.hpp
+--- openjdk.orig/hotspot/src/share/vm/utilities/globalDefinitions_gcc.hpp	2014-02-20 19:51:45.000000000 +0100
++++ openjdk/hotspot/src/share/vm/utilities/globalDefinitions_gcc.hpp	2014-06-17 17:39:28.705018998 +0200
+@@ -253,7 +253,7 @@
+ #elif defined(__APPLE__)
+ inline int g_isnan(double f) { return isnan(f); }
+ #elif defined(LINUX) || defined(_ALLBSD_SOURCE)
+-inline int g_isnan(float  f) { return isnanf(f); }
++inline int g_isnan(float  f) { return __isnanf(f); }
+ inline int g_isnan(double f) { return isnan(f); }
+ #else
+ #error "missing platform-specific definition here"
+@@ -267,8 +267,8 @@
+ 
+ // Checking for finiteness
+ 
+-inline int g_isfinite(jfloat  f)                 { return finite(f); }
+-inline int g_isfinite(jdouble f)                 { return finite(f); }
++inline int g_isfinite(jfloat  f)                 { return isfinite(f); }
++inline int g_isfinite(jdouble f)                 { return isfinite(f); }
+ 
+ 
+ // Wide characters
+diff -Nur openjdk.orig/jdk/make/com/sun/java/pack/Makefile openjdk/jdk/make/com/sun/java/pack/Makefile
+--- openjdk.orig/jdk/make/com/sun/java/pack/Makefile	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/make/com/sun/java/pack/Makefile	2014-06-17 17:39:28.705018998 +0200
+@@ -79,7 +79,7 @@
+   OTHER_CXXFLAGS += $(ZLIB_CFLAGS) -DSYSTEM_ZLIB
+  endif
+ else
+-  OTHER_CXXFLAGS += -DNO_ZLIB -DUNPACK_JNI
++  CXXFLAGS_COMMON += -DNO_ZLIB -DUNPACK_JNI
+   OTHER_LDLIBS += $(JVMLIB)
+ endif
+ 
+diff -Nur openjdk.orig/jdk/make/com/sun/nio/sctp/Makefile openjdk/jdk/make/com/sun/nio/sctp/Makefile
+--- openjdk.orig/jdk/make/com/sun/nio/sctp/Makefile	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/make/com/sun/nio/sctp/Makefile	2014-06-17 17:39:28.705018998 +0200
+@@ -64,7 +64,7 @@
+ COMPILER_WARNINGS_FATAL=true
+ endif
+ #OTHER_LDLIBS += -L$(LIBDIR)/$(LIBARCH) -ljava -lnet -lpthread -ldl
+-OTHER_LDLIBS += -L$(LIBDIR)/$(LIBARCH) -lnio -lnet -lpthread -ldl
++OTHER_LDLIBS += -L$(LIBDIR)/$(LIBARCH) -lnio -ljavanet -lpthread -ldl
+ endif
+ ifeq ($(PLATFORM), solaris)
+ #LIBSCTP = -lsctp
+diff -Nur openjdk.orig/jdk/make/common/Defs.gmk openjdk/jdk/make/common/Defs.gmk
+--- openjdk.orig/jdk/make/common/Defs.gmk	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/make/common/Defs.gmk	2014-06-17 17:39:28.705018998 +0200
+@@ -204,7 +204,7 @@
+       ifeq ($(PLATFORM), macosx)
+         FREETYPE_HEADERS_PATH = /usr/X11R6/include
+       else
+-        FREETYPE_HEADERS_PATH = /usr/include
++        FREETYPE_HEADERS_PATH = /usr/include/disabled
+       endif
+     endif
+   endif
+diff -Nur openjdk.orig/jdk/make/common/Sanity.gmk openjdk/jdk/make/common/Sanity.gmk
+--- openjdk.orig/jdk/make/common/Sanity.gmk	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/make/common/Sanity.gmk	2014-06-17 17:39:28.705018998 +0200
+@@ -91,8 +91,7 @@
+     sane-ld_run_path \
+     sane-alt_bootdir \
+     sane-bootdir \
+-    sane-local-bootdir \
+-    sane-alsa-headers
++    sane-local-bootdir
+ 
+ ifdef OPENJDK
+ sanity-all:: sane-freetype 
+diff -Nur openjdk.orig/jdk/make/common/shared/Platform.gmk openjdk/jdk/make/common/shared/Platform.gmk
+--- openjdk.orig/jdk/make/common/shared/Platform.gmk	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/make/common/shared/Platform.gmk	2014-06-17 17:39:28.705018998 +0200
+@@ -160,9 +160,6 @@
+   else
+     mach := $(shell uname -m)
+   endif
+-  ifneq (,$(wildcard /usr/bin/dpkg-architecture))
+-    mach := $(shell (dpkg-architecture -qDEB_HOST_ARCH_CPU 2>/dev/null || echo $(mach)) | sed 's/arm64/aarch64/;s/powerpc$$/ppc/;s/hppa/parisc/;s/ppc64el/ppc64le/')
+-  endif
+   archExpr = case "$(mach)" in \
+                 i[3-9]86) \
+                     echo i586 \
+diff -Nur openjdk.orig/jdk/make/common/shared/Sanity.gmk openjdk/jdk/make/common/shared/Sanity.gmk
+--- openjdk.orig/jdk/make/common/shared/Sanity.gmk	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/make/common/shared/Sanity.gmk	2014-06-17 17:39:28.705018998 +0200
+@@ -114,11 +114,6 @@
+     elif [ -f /etc/lsb-release ] ; then \
+       $(EGREP) DISTRIB_RELEASE /etc/lsb-release | $(SED) -e 's@.*DISTRIB_RELEASE=\(.*\)@\1@'; \
+     fi)
+-  ALSA_INCLUDE=/usr/include/alsa/version.h
+-  ALSA_LIBRARY=/usr/lib/libasound.so
+-  _ALSA_VERSION := $(shell $(EGREP) SND_LIB_VERSION_STR $(ALSA_INCLUDE) | \
+-           $(SED) -e 's@.*"\(.*\)".*@\1@' )
+-  ALSA_VERSION := $(call GetVersion,$(_ALSA_VERSION))
+ endif
+ 
+ ifeq ($(PLATFORM), macosx)
+@@ -225,7 +220,6 @@
+ 	sane-compiler \
+ 	sane-link \
+ 	sane-cacerts \
+-	sane-alsa-headers \
+ 	sane-ant_version \
+ 	sane-zip_version \
+ 	sane-unzip_version \
+@@ -1381,34 +1375,6 @@
+   endif
+ endif
+ 
+-######################################################
+-# Check that ALSA headers and libs are installed and 
+-# that the header has the right version. We only
+-# need /usr/include/alsa/version.h and /usr/lib/libasound.so
+-######################################################
+-
+-ifdef REQUIRED_ALSA_VERSION
+-  ALSA_CHECK := $(call CheckVersions,$(ALSA_VERSION),$(REQUIRED_ALSA_VERSION))
+-endif
+-sane-alsa-headers:
+-ifdef REQUIRED_ALSA_VERSION
+-	@if [ "$(ALSA_CHECK)" != "missing" ] ; then \
+-	    if [ "$(ALSA_CHECK)" != "same" -a "$(ALSA_CHECK)" != "newer"  ] ; then \
+-		$(ECHO) "ERROR: The ALSA version must be $(REQUIRED_ALSA_VERSION) or higher. \n" \
+-		"      You have the following ALSA version installed: $${alsa_version} \n" \
+-		"      Please reinstall ALSA (drivers and lib). You can download \n" \
+-		"      the source distribution from http://www.alsa-project.org \n" \
+-		"      or go to http://www.freshrpms.net/docs/alsa/ for precompiled RPM packages. \n" \
+-		"" >> $(ERROR_FILE) ; \
+-	    fi ; \
+-	else \
+-	    $(ECHO) "ERROR: You seem to not have installed ALSA $(REQUIRED_ALSA_VERSION) or higher. \n" \
+-	    "      Please install ALSA (drivers and lib). You can download the \n" \
+-	    "      source distribution from http://www.alsa-project.org or go to \n" \
+-	    "      http://www.freshrpms.net/docs/alsa/ for precompiled RPM packages. \n" \
+-	    "" >> $(ERROR_FILE) ; \
+-	fi
+-endif
+ 
+ # If a sanity file doesn't exist, just make sure it's dir exists
+ $(SANITY_FILES):
+diff -Nur openjdk.orig/jdk/make/java/net/Makefile openjdk/jdk/make/java/net/Makefile
+--- openjdk.orig/jdk/make/java/net/Makefile	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/make/java/net/Makefile	2014-06-17 17:39:28.709019029 +0200
+@@ -25,7 +25,7 @@
+ 
+ BUILDDIR = ../..
+ PACKAGE = java.net
+-LIBRARY = net
++LIBRARY = javanet
+ PRODUCT = sun
+ include $(BUILDDIR)/common/Defs.gmk
+ 
+diff -Nur openjdk.orig/jdk/make/java/nio/Makefile openjdk/jdk/make/java/nio/Makefile
+--- openjdk.orig/jdk/make/java/nio/Makefile	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/make/java/nio/Makefile	2014-06-17 17:39:28.709019029 +0200
+@@ -373,7 +373,7 @@
+ endif
+ 
+ ifeq ($(PLATFORM), linux)
+-  OTHER_LDLIBS += -L$(LIBDIR)/$(LIBARCH) -ljava -lnet -lpthread $(LIBDL)
++  OTHER_LDLIBS += -L$(LIBDIR)/$(LIBARCH) -ljava -ljavanet -lpthread $(LIBDL)
+   ifdef USE_SYSTEM_GIO
+     OTHER_LDLIBS += $(GIO_LIBS)
+     OTHER_INCLUDES += $(GIO_CFLAGS) -DUSE_SYSTEM_GIO
+@@ -927,7 +927,7 @@
+ 
+ $(GENSOR_EXE) : $(TEMPDIR)/$(GENSOR_SRC)
+ 	$(prep-target)
+-	($(CD) $(TEMPDIR); $(NIO_CC) $(CPPFLAGS) $(LDDFLAGS) \
++	($(CD) $(TEMPDIR); $(HOST_CC) $(CPPFLAGS_FOR_BUILD) $(LDDFLAGS) \
+ 	   -o genSocketOptionRegistry$(EXE_SUFFIX) $(GENSOR_SRC))
+ 
+ ifdef NIO_PLATFORM_CLASSES_ROOT_DIR
+@@ -963,7 +963,7 @@
+ 
+ $(GENUC_EXE) : $(GENUC_SRC)
+ 	$(prep-target)
+-	$(NIO_CC) $(CPPFLAGS) -o $@ $(GENUC_SRC)
++	$(HOST_CC) $(CPPFLAGS_FOR_BUILD) -o $@ $(GENUC_SRC)
+ 
+ ifdef NIO_PLATFORM_CLASSES_ROOT_DIR
+ $(SFS_GEN)/UnixConstants.java: $(NIO_PLATFORM_CLASSES_ROOT_DIR)/sun/nio/fs/UnixConstants-$(PLATFORM)-$(ARCH).java
+diff -Nur openjdk.orig/jdk/make/sun/awt/mawt.gmk openjdk/jdk/make/sun/awt/mawt.gmk
+--- openjdk.orig/jdk/make/sun/awt/mawt.gmk	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/make/sun/awt/mawt.gmk	2014-06-17 17:39:28.709019029 +0200
+@@ -151,22 +151,6 @@
+ #endif
+ 
+ LIBXTST = -lXtst
+-ifeq ($(PLATFORM), linux)
+-   ifeq ($(ARCH_DATA_MODEL), 64)
+-   # XXX what about the rest of them?
+-        LIBXT = -lXt
+-    else
+-    # Allows for builds on Debian GNU Linux, X11 is in a different place 
+-       LIBXT = $(firstword $(wildcard $(OPENWIN_LIB)/libXt.a) \
+-                        $(wildcard /usr/lib/libXt.a))
+-       LIBSM = $(firstword $(wildcard $(OPENWIN_LIB)/libSM.a) \
+-                        $(wildcard /usr/lib/libSM.a))
+-       LIBICE = $(firstword $(wildcard $(OPENWIN_LIB)/libICE.a) \
+-                         $(wildcard /usr/lib/libICE.a))
+-       LIBXTST = $(firstword $(wildcard $(OPENWIN_LIB)/libXtst.a) \
+-                         $(wildcard /usr/lib/libXtst.a))
+-   endif
+-endif
+ 
+ # Use -lXmu for EditRes support
+ LIBXMU_DBG	= -lXmu
+@@ -181,7 +165,7 @@
+ OTHER_CFLAGS += -DMLIB_NO_LIBSUNMATH
+ # XXX what is this define below? Isn't it motif-related?
+ OTHER_CFLAGS += -DXMSTRINGDEFINES=1
+-OTHER_LDLIBS =  $(LIBXMU) $(LIBXTST) -lXext $(LIBXT) $(LIBSM) $(LIBICE) -lX11 -lXi
++OTHER_LDLIBS =  $(LIBXMU) $(LIBXTST) -lXext -lXt -lSM -lICE -lX11 -lXi
+ endif
+ 
+ endif
+@@ -231,11 +215,6 @@
+   CPPFLAGS += -I$(PLATFORM_SRC)/native/common/deps/fontconfig2
+ endif
+ 
+-ifndef HEADLESS
+-CPPFLAGS += -I$(OPENWIN_HOME)/include 
+-LDFLAGS  += -L$(OPENWIN_LIB)
+-
+-endif # !HEADLESS
+ 
+ CPPFLAGS += -I$(SHARE_SRC)/native/$(PKGDIR)/debug \
+             -I$(SHARE_SRC)/native/$(PKGDIR)/../font \
+@@ -270,11 +249,6 @@
+ endif # !HEADLESS
+ endif # PLATFORM
+ 
+-ifeq ($(PLATFORM), linux)
+-  # Checking for the X11/extensions headers at the additional location
+-  CPPFLAGS += -I$(firstword $(wildcard $(OPENWIN_HOME)/include/X11/extensions) \
+-                        $(wildcard /usr/include/X11/extensions))
+-endif
+ 
+ ifeq ($(PLATFORM), macosx))
+   CPPFLAGS += -I$(OPENWIN_HOME)/include/X11/extensions \
+diff -Nur openjdk.orig/jdk/make/sun/xawt/Makefile openjdk/jdk/make/sun/xawt/Makefile
+--- openjdk.orig/jdk/make/sun/xawt/Makefile	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/make/sun/xawt/Makefile	2014-06-17 17:39:28.709019029 +0200
+@@ -292,16 +292,10 @@
+ SIZERS = $(SIZER).32
+ SIZERS_C = $(SIZER_32_C)
+ SIZES = $(WRAPPER_GENERATOR_DIR)/sizes.32
+-ifdef CROSS_COMPILE_ARCH
+-CFLAGS_32 = -m32
+-endif
+ else # !32
+ SIZERS = $(SIZER).64
+ SIZERS_C = $(SIZER_64_C)
+ SIZES = $(WRAPPER_GENERATOR_DIR)/sizes.64
+-ifdef CROSS_COMPILE_ARCH
+-CFLAGS_64 = -m64
+-endif
+ endif # 32
+ endif # !macosx
+ endif # solaris
+@@ -337,11 +331,7 @@
+ WRAPPER_GENERATOR_CLASS=$(WRAPPER_GENERATOR_TEMPDIR)/WrapperGenerator.class 
+ XLIBTYPES=$(PLATFORM_SRC)/classes/sun/awt/X11/generator/xlibtypes.txt
+ 
+-ifndef CROSS_COMPILE_ARCH
+-SIZERS_CC = $(CC)
+-else
+-SIZERS_CC = $(HOST_CC)
+-endif
++SIZERS_CC = $(CC) -static
+ 
+ $(SIZERS): $(SIZERS_C) 
+ 	$(prep-target)
+@@ -364,7 +354,7 @@
+ 	    $(CHMOD) +w $@;\
+ 	else	\
+ 	    $(ECHO) GENERATING $@; \
+-	    $(WRAPPER_GENERATOR_DIR)/sizer$(suffix $@) > $@; \
++	    $(QEMU) $(WRAPPER_GENERATOR_DIR)/sizer$(suffix $@) > $@; \
+ 	fi
+ 	@if [ "$(DOCOMPARE)$(suffix $@)" = "true.64" ]; then \
+ 	    $(ECHO) COMPARING $@ and $(STORED_SIZES_TMPL_$(PLATFORM)_$(LIBARCH)); \
+diff -Nur openjdk.orig/jdk/src/share/classes/java/net/AbstractPlainDatagramSocketImpl.java openjdk/jdk/src/share/classes/java/net/AbstractPlainDatagramSocketImpl.java
+--- openjdk.orig/jdk/src/share/classes/java/net/AbstractPlainDatagramSocketImpl.java	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/src/share/classes/java/net/AbstractPlainDatagramSocketImpl.java	2014-06-17 17:39:28.709019029 +0200
+@@ -69,7 +69,7 @@
+      */
+     static {
+         java.security.AccessController.doPrivileged(
+-                  new sun.security.action.LoadLibraryAction("net"));
++                  new sun.security.action.LoadLibraryAction("javanet"));
+     }
+ 
+     /**
+diff -Nur openjdk.orig/jdk/src/share/classes/java/net/AbstractPlainSocketImpl.java openjdk/jdk/src/share/classes/java/net/AbstractPlainSocketImpl.java
+--- openjdk.orig/jdk/src/share/classes/java/net/AbstractPlainSocketImpl.java	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/src/share/classes/java/net/AbstractPlainSocketImpl.java	2014-06-17 17:39:28.709019029 +0200
+@@ -78,7 +78,7 @@
+      */
+     static {
+         java.security.AccessController.doPrivileged(
+-                  new sun.security.action.LoadLibraryAction("net"));
++                  new sun.security.action.LoadLibraryAction("javanet"));
+     }
+ 
+     /**
+diff -Nur openjdk.orig/jdk/src/share/classes/java/net/DatagramPacket.java openjdk/jdk/src/share/classes/java/net/DatagramPacket.java
+--- openjdk.orig/jdk/src/share/classes/java/net/DatagramPacket.java	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/src/share/classes/java/net/DatagramPacket.java	2014-06-17 17:39:28.709019029 +0200
+@@ -47,7 +47,7 @@
+      */
+     static {
+         java.security.AccessController.doPrivileged(
+-                  new sun.security.action.LoadLibraryAction("net"));
++                  new sun.security.action.LoadLibraryAction("javanet"));
+         init();
+     }
+ 
+diff -Nur openjdk.orig/jdk/src/share/classes/java/net/InetAddress.java openjdk/jdk/src/share/classes/java/net/InetAddress.java
+--- openjdk.orig/jdk/src/share/classes/java/net/InetAddress.java	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/src/share/classes/java/net/InetAddress.java	2014-06-17 17:39:28.709019029 +0200
+@@ -267,7 +267,7 @@
+     static {
+         preferIPv6Address = java.security.AccessController.doPrivileged(
+             new GetBooleanAction("java.net.preferIPv6Addresses")).booleanValue();
+-        AccessController.doPrivileged(new LoadLibraryAction("net"));
++        AccessController.doPrivileged(new LoadLibraryAction("javanet"));
+         init();
+     }
+ 
+diff -Nur openjdk.orig/jdk/src/share/classes/java/net/NetworkInterface.java openjdk/jdk/src/share/classes/java/net/NetworkInterface.java
+--- openjdk.orig/jdk/src/share/classes/java/net/NetworkInterface.java	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/src/share/classes/java/net/NetworkInterface.java	2014-06-17 17:39:28.709019029 +0200
+@@ -53,7 +53,7 @@
+     private static final int defaultIndex; /* index of defaultInterface */
+ 
+     static {
+-        AccessController.doPrivileged(new LoadLibraryAction("net"));
++        AccessController.doPrivileged(new LoadLibraryAction("javanet"));
+         init();
+         defaultInterface = DefaultInterface.getDefault();
+         if (defaultInterface != null) {
+diff -Nur openjdk.orig/jdk/src/share/classes/sun/net/sdp/SdpSupport.java openjdk/jdk/src/share/classes/sun/net/sdp/SdpSupport.java
+--- openjdk.orig/jdk/src/share/classes/sun/net/sdp/SdpSupport.java	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/src/share/classes/sun/net/sdp/SdpSupport.java	2014-06-17 17:39:28.709019029 +0200
+@@ -76,6 +76,6 @@
+ 
+     static {
+         AccessController.doPrivileged(
+-            new sun.security.action.LoadLibraryAction("net"));
++            new sun.security.action.LoadLibraryAction("javanet"));
+     }
+ }
+diff -Nur openjdk.orig/jdk/src/share/classes/sun/net/spi/DefaultProxySelector.java openjdk/jdk/src/share/classes/sun/net/spi/DefaultProxySelector.java
+--- openjdk.orig/jdk/src/share/classes/sun/net/spi/DefaultProxySelector.java	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/src/share/classes/sun/net/spi/DefaultProxySelector.java	2014-06-17 17:39:28.709019029 +0200
+@@ -95,7 +95,7 @@
+                 }});
+         if (b != null && b.booleanValue()) {
+             java.security.AccessController.doPrivileged(
+-                      new sun.security.action.LoadLibraryAction("net"));
++                      new sun.security.action.LoadLibraryAction("javanet"));
+             hasSystemProxies = init();
+         }
+     }
+diff -Nur openjdk.orig/jdk/src/share/classes/sun/nio/ch/Util.java openjdk/jdk/src/share/classes/sun/nio/ch/Util.java
+--- openjdk.orig/jdk/src/share/classes/sun/nio/ch/Util.java	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/src/share/classes/sun/nio/ch/Util.java	2014-06-17 17:39:28.709019029 +0200
+@@ -483,7 +483,7 @@
+                 return;
+             loaded = true;
+             java.security.AccessController
+-                .doPrivileged(new sun.security.action.LoadLibraryAction("net"));
++                .doPrivileged(new sun.security.action.LoadLibraryAction("javanet"));
+             java.security.AccessController
+                 .doPrivileged(new sun.security.action.LoadLibraryAction("nio"));
+             // IOUtil must be initialized; Its native methods are called from
+diff -Nur openjdk.orig/jdk/src/solaris/classes/sun/net/dns/ResolverConfigurationImpl.java openjdk/jdk/src/solaris/classes/sun/net/dns/ResolverConfigurationImpl.java
+--- openjdk.orig/jdk/src/solaris/classes/sun/net/dns/ResolverConfigurationImpl.java	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/src/solaris/classes/sun/net/dns/ResolverConfigurationImpl.java	2014-06-17 17:39:28.713019059 +0200
+@@ -247,7 +247,7 @@
+ 
+     static {
+         java.security.AccessController.doPrivileged(
+-            new sun.security.action.LoadLibraryAction("net"));
++            new sun.security.action.LoadLibraryAction("javanet"));
+     }
+ 
+ }
+diff -Nur openjdk.orig/jdk/src/solaris/native/sun/awt/awt_InputMethod.c openjdk/jdk/src/solaris/native/sun/awt/awt_InputMethod.c
+--- openjdk.orig/jdk/src/solaris/native/sun/awt/awt_InputMethod.c	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/src/solaris/native/sun/awt/awt_InputMethod.c	2014-06-17 17:39:28.713019059 +0200
+@@ -246,7 +246,8 @@
+     if (wcs == NULL)
+         return NULL;
+ 
+-    n = len*MB_CUR_MAX + 1;
++    //evil hack for uclibc
++    n = len*1 + 1;
+ 
+     mbs = (char *) malloc(n * sizeof(char));
+     if (mbs == NULL) {
+diff -Nur openjdk.orig/jdk/src/solaris/native/sun/xawt/XToolkit.c openjdk/jdk/src/solaris/native/sun/xawt/XToolkit.c
+--- openjdk.orig/jdk/src/solaris/native/sun/xawt/XToolkit.c	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/src/solaris/native/sun/xawt/XToolkit.c	2014-06-17 17:39:28.713019059 +0200
+@@ -27,9 +27,6 @@
+ #include <X11/Xutil.h>
+ #include <X11/Xos.h>
+ #include <X11/Xatom.h>
+-#ifdef __linux__
+-#include <execinfo.h>
+-#endif
+ 
+ #include <jvm.h>
+ #include <jni.h>
+@@ -785,25 +782,6 @@
+     return ret;
+ }
+ 
+-#ifdef __linux__
+-void print_stack(void)
+-{
+-  void *array[10];
+-  size_t size;
+-  char **strings;
+-  size_t i;
+-
+-  size = backtrace (array, 10);
+-  strings = backtrace_symbols (array, size);
+-
+-  fprintf (stderr, "Obtained %zd stack frames.\n", size);
+-
+-  for (i = 0; i < size; i++)
+-     fprintf (stderr, "%s\n", strings[i]);
+-
+-  free (strings);
+-}
+-#endif
+ 
+ Window get_xawt_root_shell(JNIEnv *env) {
+   static jclass classXRootWindow = NULL;
+diff -Nur openjdk.orig/jdk/src/windows/classes/sun/net/dns/ResolverConfigurationImpl.java openjdk/jdk/src/windows/classes/sun/net/dns/ResolverConfigurationImpl.java
+--- openjdk.orig/jdk/src/windows/classes/sun/net/dns/ResolverConfigurationImpl.java	2014-04-12 01:23:06.000000000 +0200
++++ openjdk/jdk/src/windows/classes/sun/net/dns/ResolverConfigurationImpl.java	2014-06-17 17:39:28.713019059 +0200
+@@ -159,7 +159,7 @@
+ 
+     static {
+         java.security.AccessController.doPrivileged(
+-            new sun.security.action.LoadLibraryAction("net"));
++            new sun.security.action.LoadLibraryAction("javanet"));
+         init0();
+ 
+         // start the address listener thread
+diff -Nur openjdk.orig/jdk/src/solaris/bin/mipsel/jvm.cfg openjdk/jdk/src/solaris/bin/mipsel/jvm.cfg
+--- openjdk.orig/jdk/src/solaris/bin/mipsel/jvm.cfg	1970-01-01 01:00:00.000000000 +0100
++++ openjdk/jdk/src/solaris/bin/mipsel/jvm.cfg	2014-04-12 01:23:06.000000000 +0200
+@@ -0,0 +1,38 @@
++# Copyright (c) 2011, Oracle and/or its affiliates. All rights reserved.
++# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
++#
++# This code is free software; you can redistribute it and/or modify it
++# under the terms of the GNU General Public License version 2 only, as
++# published by the Free Software Foundation.  Oracle designates this
++# particular file as subject to the "Classpath" exception as provided
++# by Oracle in the LICENSE file that accompanied this code.
++#
++# This code is distributed in the hope that it will be useful, but WITHOUT
++# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
++# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
++# version 2 for more details (a copy is included in the LICENSE file that
++# accompanied this code).
++#
++# You should have received a copy of the GNU General Public License version
++# 2 along with this work; if not, write to the Free Software Foundation,
++# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
++#
++# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
++# or visit www.oracle.com if you need additional information or have any
++# questions.
++#
++# List of JVMs that can be used as an option to java, javac, etc.
++# Order is important -- first in this list is the default JVM.
++# NOTE that this both this file and its format are UNSUPPORTED and
++# WILL GO AWAY in a future release.
++#
++# You may also select a JVM in an arbitrary location with the
++# "-XXaltjvm=<jvm_dir>" option, but that too is unsupported
++# and may not be available in a future release.
++#
++-client KNOWN
++-server KNOWN
++-hotspot ERROR
++-classic WARN
++-native ERROR
++-green ERROR
+diff -Nur openjdk-boot.orig/corba/make/common/shared/Defs-utils.gmk openjdk-boot/corba/make/common/shared/Defs-utils.gmk
+--- openjdk-boot.orig/corba/make/common/shared/Defs-utils.gmk	2014-01-21 06:46:58.000000000 -0600
++++ openjdk-boot/corba/make/common/shared/Defs-utils.gmk	2015-01-15 20:14:56.947156399 -0600
+@@ -136,12 +136,12 @@
+ TRUE           = $(UTILS_COMMAND_PATH)true
+ UNAME          = $(UTILS_COMMAND_PATH)uname
+ UNIQ           = $(UTILS_USR_BIN_PATH)uniq
+-UNZIP          = $(UTILS_USR_BIN_PATH)unzip
+-UNZIPSFX       = $(UTILS_DEVTOOL_PATH)unzipsfx
++UNZIP          = unzip
++UNZIPSFX       = unzipsfx
+ WC             = $(UTILS_USR_BIN_PATH)wc
+ WHICH          = $(UTILS_USR_BIN_PATH)which
+ YACC           = $(UTILS_CCS_BIN_PATH)yacc
+-ZIPEXE         = $(UTILS_DEVTOOL_PATH)zip
++ZIPEXE         = zip
+ 
+ # Special cases
+ #RM   is defined by GNU Make as 'rm -f'
+diff -Nur openjdk-boot.orig/hotspot/make/linux/makefiles/vm.make openjdk-boot/hotspot/make/linux/makefiles/vm.make
+--- openjdk-boot.orig/hotspot/make/linux/makefiles/vm.make	2014-02-20 12:51:45.000000000 -0600
++++ openjdk-boot/hotspot/make/linux/makefiles/vm.make	2015-01-15 20:12:14.711157805 -0600
+@@ -288,7 +288,7 @@
+   LIBS_VM                  += $(LIBS)
+ endif
+ ifeq ($(JVM_VARIANT_ZEROSHARK), true)
+-  LIBS_VM   += $(LIBFFI_LIBS) $(LLVM_LIBS)
++  LIBS_VM   += $(LLVM_LIBS)
+   LFLAGS_VM += $(LLVM_LDFLAGS)
+ endif
+ 
+diff -Nur openjdk-boot.orig/hotspot/make/linux/makefiles/zero.make openjdk-boot/hotspot/make/linux/makefiles/zero.make
+--- openjdk-boot.orig/hotspot/make/linux/makefiles/zero.make	2014-02-20 12:51:45.000000000 -0600
++++ openjdk-boot/hotspot/make/linux/makefiles/zero.make	2015-01-15 20:12:14.711157805 -0600
+@@ -33,4 +33,4 @@
+ 
+ # Make sure libffi is included
+ CFLAGS += $(LIBFFI_CFLAGS)
+-LIBS_VM += $(LIBFFI_LIBS)
++LIBS_VM += $(FFI_LDFLAGS) -Wl,-Bstatic $(LIBFFI_LIBS) -Wl,-Bdynamic
+diff -Nur openjdk-boot.orig/jdk/make/common/Sanity.gmk openjdk-boot/jdk/make/common/Sanity.gmk
+--- openjdk-boot.orig/jdk/make/common/Sanity.gmk	2014-04-11 18:23:06.000000000 -0500
++++ openjdk-boot/jdk/make/common/Sanity.gmk	2015-01-15 20:12:14.711157805 -0600
+@@ -91,8 +91,7 @@
+     sane-ld_run_path \
+     sane-alt_bootdir \
+     sane-bootdir \
+-    sane-local-bootdir \
+-    sane-alsa-headers
++    sane-local-bootdir
+ 
+ ifdef OPENJDK
+ sanity-all:: sane-freetype 
+diff -Nur openjdk-boot.orig/jdk/make/common/shared/Defs-utils.gmk openjdk-boot/jdk/make/common/shared/Defs-utils.gmk
+--- openjdk-boot.orig/jdk/make/common/shared/Defs-utils.gmk	2014-04-11 18:23:06.000000000 -0500
++++ openjdk-boot/jdk/make/common/shared/Defs-utils.gmk	2015-01-15 20:45:49.051139347 -0600
+@@ -153,13 +153,13 @@
+ TRUE           = $(UTILS_COMMAND_PATH)true
+ UNAME          = $(UTILS_COMMAND_PATH)uname
+ UNIQ           = $(UTILS_USR_BIN_PATH)uniq
+-UNZIP          = $(UTILS_USR_BIN_PATH)unzip
+-UNZIPSFX       = $(UTILS_DEVTOOL_PATH)unzipsfx
++UNZIP          = unzip
++UNZIPSFX       = unzipsfx
+ XARGS          = $(UTILS_USR_BIN_PATH)xargs
+ WC             = $(UTILS_USR_BIN_PATH)wc
+ WHICH          = $(UTILS_USR_BIN_PATH)which
+ YACC           = $(UTILS_CCS_BIN_PATH)yacc
+-ZIPEXE         = $(UTILS_DEVTOOL_PATH)zip
++ZIPEXE         = zip
+ 
+ # Special cases
+ #RM   is defined by GNU Make as 'rm -f'
+diff -Nur openjdk-boot.orig/jdk/make/common/shared/Sanity.gmk openjdk-boot/jdk/make/common/shared/Sanity.gmk
+--- openjdk-boot.orig/jdk/make/common/shared/Sanity.gmk	2014-04-11 18:23:06.000000000 -0500
++++ openjdk-boot/jdk/make/common/shared/Sanity.gmk	2015-01-15 20:12:14.715157805 -0600
+@@ -114,11 +114,6 @@
+     elif [ -f /etc/lsb-release ] ; then \
+       $(EGREP) DISTRIB_RELEASE /etc/lsb-release | $(SED) -e 's@.*DISTRIB_RELEASE=\(.*\)@\1@'; \
+     fi)
+-  ALSA_INCLUDE=/usr/include/alsa/version.h
+-  ALSA_LIBRARY=/usr/lib/libasound.so
+-  _ALSA_VERSION := $(shell $(EGREP) SND_LIB_VERSION_STR $(ALSA_INCLUDE) | \
+-           $(SED) -e 's@.*"\(.*\)".*@\1@' )
+-  ALSA_VERSION := $(call GetVersion,$(_ALSA_VERSION))
+ endif
+ 
+ ifeq ($(PLATFORM), macosx)
+@@ -225,7 +220,6 @@
+ 	sane-compiler \
+ 	sane-link \
+ 	sane-cacerts \
+-	sane-alsa-headers \
+ 	sane-ant_version \
+ 	sane-zip_version \
+ 	sane-unzip_version \
+@@ -1381,35 +1375,6 @@
+   endif
+ endif
+ 
+-######################################################
+-# Check that ALSA headers and libs are installed and 
+-# that the header has the right version. We only
+-# need /usr/include/alsa/version.h and /usr/lib/libasound.so
+-######################################################
+-
+-ifdef REQUIRED_ALSA_VERSION
+-  ALSA_CHECK := $(call CheckVersions,$(ALSA_VERSION),$(REQUIRED_ALSA_VERSION))
+-endif
+-sane-alsa-headers:
+-ifdef REQUIRED_ALSA_VERSION
+-	@if [ "$(ALSA_CHECK)" != "missing" ] ; then \
+-	    if [ "$(ALSA_CHECK)" != "same" -a "$(ALSA_CHECK)" != "newer"  ] ; then \
+-		$(ECHO) "ERROR: The ALSA version must be $(REQUIRED_ALSA_VERSION) or higher. \n" \
+-		"      You have the following ALSA version installed: $${alsa_version} \n" \
+-		"      Please reinstall ALSA (drivers and lib). You can download \n" \
+-		"      the source distribution from http://www.alsa-project.org \n" \
+-		"      or go to http://www.freshrpms.net/docs/alsa/ for precompiled RPM packages. \n" \
+-		"" >> $(ERROR_FILE) ; \
+-	    fi ; \
+-	else \
+-	    $(ECHO) "ERROR: You seem to not have installed ALSA $(REQUIRED_ALSA_VERSION) or higher. \n" \
+-	    "      Please install ALSA (drivers and lib). You can download the \n" \
+-	    "      source distribution from http://www.alsa-project.org or go to \n" \
+-	    "      http://www.freshrpms.net/docs/alsa/ for precompiled RPM packages. \n" \
+-	    "" >> $(ERROR_FILE) ; \
+-	fi
+-endif
+-
+ # If a sanity file doesn't exist, just make sure it's dir exists
+ $(SANITY_FILES):
+ 	-@$(prep-target)
+diff -Nur openjdk-boot.orig/jdk/make/javax/sound/jsoundalsa/Makefile openjdk-boot/jdk/make/javax/sound/jsoundalsa/Makefile
+--- openjdk-boot.orig/jdk/make/javax/sound/jsoundalsa/Makefile	2014-04-11 18:23:06.000000000 -0500
++++ openjdk-boot/jdk/make/javax/sound/jsoundalsa/Makefile	2015-01-15 20:12:14.715157805 -0600
+@@ -72,6 +72,7 @@
+ 	-DUSE_PORTS=TRUE  \
+ 	-DUSE_PLATFORM_MIDI_OUT=TRUE \
+ 	-DUSE_PLATFORM_MIDI_IN=TRUE \
++	$(ALSA_CPPFLAGS) \
+ 	-I$(SHARE_SRC)/native/com/sun/media/sound
+ 
+ #
+diff -Nur openjdk-boot.orig/jdk/make/sun/awt/mawt.gmk openjdk-boot/jdk/make/sun/awt/mawt.gmk
+--- openjdk-boot.orig/jdk/make/sun/awt/mawt.gmk	2014-04-11 18:23:06.000000000 -0500
++++ openjdk-boot/jdk/make/sun/awt/mawt.gmk	2015-01-15 20:12:14.715157805 -0600
+@@ -270,12 +270,6 @@
+ endif # !HEADLESS
+ endif # PLATFORM
+ 
+-ifeq ($(PLATFORM), linux)
+-  # Checking for the X11/extensions headers at the additional location
+-  CPPFLAGS += -I$(firstword $(wildcard $(OPENWIN_HOME)/include/X11/extensions) \
+-                        $(wildcard /usr/include/X11/extensions))
+-endif
+-
+ ifeq ($(PLATFORM), macosx))
+   CPPFLAGS += -I$(OPENWIN_HOME)/include/X11/extensions \
+               -I$(OPENWIN_HOME)/include 
